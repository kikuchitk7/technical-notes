チーム開発における注意事項
=================================

- チーム開発においては、下記に注意する。

ソースコード管理
-----------------------
- tf ファイルをバージョン管理システム (Git など) で管理する。

.. warning::

    - tfstate ファイルをバージョン管理システムで管理しない。
    - tfstate ファイル (Terraform で管理している環境) を壊す原因になる。
        - 最新の tfstate ファイルを取得せずに apply してしまう。
        - apply した後に push を忘れる。

ブランチ戦略
------------------
- どのブランチで apply するかを決める。
    - master ブランチにマージしたら apply する。
    - develop ブランチはステージング環境に apply する。
    - master ブランチは本番環境に apply する。
    - など

レビュー
----------------
- 例えば、下記のレビューを実施する。

アーキテクチャレビュー
^^^^^^^^^^^^^^^^^^^^^^^^^^
- 方式変更など変更内容やその影響が大きい際に実施する。

コードレビュー
^^^^^^^^^^^^^^^^^^^
- 下記の観点に注意して実施する。

    - コードの一貫性
    - 変数やモジュール等の命名の分かりやすさ
    - 不要な依存関係の有無
    - コメントの分かりやすさ
    - パラメータのデフォルト値

.. warning::

    - Terraform のデフォルト値と AWS の API のデフォルト値が異なる場合があるので、注意すること。
    - 実際に、EC2 の AMI の "latest" が異なることがあった。(例はいずれ記載)

実行計画レビュー
^^^^^^^^^^^^^^^^^^^^^^
- terraform plan コマンドの実行結果をレビューする。
- 既存リソースの変更や削除の際は特に注意する。

プルリクエストテンプレート
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 例えば、下記のテンプレートに従ってコメントを作成する。
- 参考：`「実践 Terraform」のコードサンプル <https://github.com/tmknom/example-pragmatic-terraform/blob/master/26/PULL_REQUEST_TEMPLATE.md>`_

::

    # 概要
    <!-- コードの変更理由や意図を書きましょう -->

    # 影響範囲
    <!-- この変更によりどのような影響が出るか書きましょう -->

    # レビューポイント
    <!-- もやもやしていることやレビュー時に特に見てほしいポイントを書きましょう -->

    # 実行計画
    <!-- terraform planの実行結果を貼りましょう -->


Apply 戦略
-----------------
- 手動、自動のいずれで実施するかを決める。

手動で Apply
^^^^^^^^^^^^^^^^^^^^^
- Developer 自身がローカルの作業環境で Apply を実施する。
- ルールを決めるだけで簡便に実行できる。システム的な作り込みも不要。
- ローカル環境にクレデンシャルを持たせないといけないので、その管理が課題になる。
- 手動実行となるので、ヒューマンエラーが発生し得る。

自動で apply
^^^^^^^^^^^^^^^^^^^^^
- AWS CodeBuild などを利用して自動実行する。
- AWS のサービスを利用して実施する場合は、IAM ロールでの権限付与ができるためクレデンシャルを安全に管理できる。
- AWS 以外のサービスやツールを利用する場合は、依然としてクレデンシャルの管理が課題となる。

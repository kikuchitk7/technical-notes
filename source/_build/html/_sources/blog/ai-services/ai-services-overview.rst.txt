[第3回] AI サービスの全体像
==================================

はじめに
----------------
`前回 <https://news.mynavi.jp/itsearch/article/cloud/4799>`_ は、
AWS の機械学習サービスの全体像と機械学習を活用する際の前提事項ついてご説明させていただきしました。

| 今回からは AI サービスを見ていきたいと思います。
| 下図の赤枠内が AI サービスであり、今回の記事の説明範囲です。

.. image:: ../../../images/AWSのMLスタック_2019_AIサービス.png

(出典：2019年12月12日開催 「AWS re:Invent 2019 re:Cap | AI/ML」 の資料より)

| まずは AI サービスの全体像についてまとめます。
| 次回から何回かに渡って、個々の AI サービスの詳細や具体的な使い方について扱っていきます。

今回の記事では、下記を理解していただくことを目標に解説をしていきます。
- AI サービスのラインナップとそれぞれの概要がわかる。


AI サービスとは
---------------------

AI サービスの全体像
^^^^^^^^^^^^^^^^^^^^^^^^^
AI サービスは、3つのレイヤーで提供される機械学習サービスで最上位に位置するサービスです。

| 「画像・動画像認識」や「機械翻訳」、「不正検知」といったユースケースごとにサービスが用意されている。
| 自身の抱えるビジネス上の問題・課題とユースケースが一致する場合に利用できる。

AWS re:Invent 2019 で下記が新サービスとして追加された。
AI サービスのラインナップ (アイコンの数) が13個になった。

- Amazon Kendra
- Amazon Faud Detector
- Amazon CodeGuru
- Contact Lens for Amazon Connect

ただし、これらはプレビュー版での公開となる点に注意する。
仕様が変わる。ドキュメントの公開も限定的。
魅力的な機能が多いが、本番 (商用) 環境での利用は一般公開 (GA) を待つ、仕様変更の可能性を理解した上で使ってほしい。

既存サービスの機能強化も発表された。

- Amazon Rekognition
- Amazon Transcribe

参考情報として、アップデートを強調した図を下記に示します。

.. image:: ../../../images/AWSのMLスタック_2019_new.png

(出典：2019年12月12日開催 「AWS re:Invent 2019 re:Cap | AI/ML」 の資料より)


AI サービスの特徴
^^^^^^^^^^^^^^^^^^^^^^^^^^
特徴は主に下記の2つ。

- 各サービスのユースケースと使い方がわかれば導入できる。
- 推論エンドポイントを使って、簡単にアプリに組み込める。


それぞれ詳しく見ていきます。

各サービスのユースケースと使い方がわかれば導入できる。
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

| 「AWS の ML スタック」の図に記載されているように、AI サービスの謳い文句は「機械学習の深い知識なしに利用可能」です。
| これは、各サービスのユースケースと使い方がわかれば、機械学習アルゴリズムがわからなくても機械学習を導入することができることを意味する。

AI サービスの使い方にはパターンが2つある。

パターン①：AWS が生成した学習済の機械学習モデルを使う。
パターン②：利用者独自の学習データから機械学習モデルを生成して使う。

.. image:: ../../../images/AIサービスのパターン.png

パターン①：AWS が生成した学習済の機械学習モデルを使う。
********************************************************
AWS が準備した学習データから生成された機械学習モデルを利用する。
全利用者が共通の機械学習モデルを利用する。
多少のチューニングは可能。

例えば、パターン①には Amazon Translate (テキストの翻訳サービス) がある。
利用者独自の語彙を定めるなど程度のカスタマイズは可能。


パターン②：利用者独自の学習データから機械学習モデルを生成して使う。
***********************************************************************
AWS によって機械学習モデルを生成する仕組みが提供される。
利用者が準備した学習データを使い、利用者独自の機械学習アルゴリズムを生成する。

例えば、パターン②には Amazon Forecast (時系列データの予測サービス) があり、商品の需要予測に応用できる。
学習データには自社商品の過去データとすることができる。
利用者のデータに基づいた機械学習モデルを生成できるので、より確からしい需要予測ができる。


推論エンドポイントを使って、簡単にアプリに組み込める。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
他の AWS サービスと同様にエンドポイントが提供される。
機械学習モデルを生成すると、推論エンドポイントが作成される。
利用者のアプリから推論エンドポイントにアクセスすることで機械学習を取り入れることができる。

下記も組み込みたい文章

利用者が考える部分が少なくて済む。
利用者自身が準備する部分が多い ML サービス (Amazon SageMaker とその関連サービス) と比較すると導入の難易度は低くなる。
例えば、多くのサービスの背後でディープラーニングが利用されている。
利用するサービスのユースケースや使い方を理解していれば、ディープラーニングについて知らなくても利用が可能。
結果的に「機械学習の深い知識なしに利用可能」となる。
機械学習に明るいエンジニアがいる場合でも要件がマッチしていればアジリティを持って機械学習を導入することができることがメリット。
しかし、機械学習に関する知識がゼロで良いという訳ではない。例えば、精度が出ない場合に未学習 (under-fitting)、過学習 (over-fitting) のいずれの状態にあるのかが判断できないと正しくチューニングできない。




AI サービスの概要
^^^^^^^^^^^^^^^^^^^^^
| AI サービスの概要について下記の表にまとめます。
| ここでは簡単な説明に留め、次回以降に詳細な説明を行うこととします。

注意事項
++++++++++++++
- 2020年2月3日時点の公開情報に基づいて作成する。
- 分類は「AWS の ML スタック」に従う。
- 「利用パターン」は、上記で説明した使い方のパターンであり、表では番号のみを示す。

  - パターン①：AWS が生成した学習済の機械学習モデルを使う。
  - パターン②：利用者独自の学習データから機械学習モデルを生成して使う。

- | 読者の多くは東京リージョンでの利用を想定していると考えられるため、東京リージョンでの利用可否を記載する。
  | また、言語を扱うサービスはカッコ内に日本語の対応状況を記載する。


.. list-table::
    :widths: 5, 5, 5, 5, 5
    :header-rows: 1

    * - 分類
      - サービス名
      - サービスの説明とユースケース
      - 使い方のパターン
      - 東京での利用可否
    * - Vision
      - `Amazon Rekognition <https://aws.amazon.com/jp/rekognition/>`_
      - | **画像・動画像解析**
        | - 画像・動画像内の物体やシーンの特定
        | - 利用者独自の画像とラベルによる任意の物体や人物の特定 (カスタムラベル機能)
        | - 画像・動画像内の人物の表情や感情の分析
      - | ① (カスタムラベル 以外)
        | ② (カスタムラベル)
      - ○
    * - Speech
      - `Amazon Polly <https://aws.amazon.com/jp/polly/>`_
      - | **テキストの読み上げ**
        | - コールセンター業務の定型文章の読み上げ
      - ①
      - | ○
        | (日本語対応済)
    * - 
      - `Amazon Transcribe <https://aws.amazon.com/jp/transcribe/>`_
      - | **音声の文字起こし**
        | - コールセンターでの顧客の問合せ内容 (音声データ) の文書化
      - ①
      - | ○ ¥*1
        | (日本語未対応機能あり) ¥*2
    * - Text
      - `Amazon Comprehend <https://aws.amazon.com/jp/comprehend/>`_
      - | **自然言語処理・テキスト分析**
        | - メール、SNS、顧客アンケート結果などの感情分析やキーフレーズ抽出
      - | ① (Custom Comprehend 以外) 
        | ② (Custom Comprehend)
      - | ○ ¥*1
        | (日本語対応済)
    * - 
      - `Amazon Translate <https://aws.amazon.com/jp/translate/>`_
      - | **テキストの翻訳**
        | - ユーザーマニュアルの他言語への自動翻訳 (多言語対応)
      - ①
      - | ○
        | (日本語対応済)
    * - 
      - `Amazon Textract <https://aws.amazon.com/jp/textract/>`_
      - | **ドキュメント分析**
        | - X
      - ①
      - | ×
        | (日本語未対応)
    * - Search
      - `Amazon Kendra (プレビュー) <https://aws.amazon.com/jp/kendra/>`_
      - | **検索サービス**
        | - X
      - ①
      - ×
    * - Chatbot
      - `Amazon Lex <https://aws.amazon.com/jp/lex/>`_
      - | **チャットボット**
        | - X
      - ①
      - | ×
        | (日本語未対応)
    * - Personalization
      - `Amazon Personalize <https://aws.amazon.com/jp/personalize/>`_
      - | **レコメンド**
        | - X
      - ②
      - ○
    * - Forecasting
      - `Amazon Forecast <https://aws.amazon.com/jp/forecast/>`_
      - | **時系列データの予測**
        | - 商品、
      - ②
      - ○
    * - Fraud
      - `Amazon Fraud Detection (プレビュー) <https://aws.amazon.com/jp/fraud-detector/>`_
      - | **不正検知**
        | - X
      - ②
      - ×
    * - Development
      - `Amazon CodeGuru (プレビュー) <https://aws.amazon.com/jp/codeguru/>`_
      - | **コードレビューの自動化**
        | - X
      - ①
      - ×
    * - Contact Center
      - `Contact Lens for Amazon Connect (プレビュー) <https://aws.amazon.com/jp/connect/contact-lens/>`_
      - | **Amazon Connect のコンタクトセンター分析**
        | - X
      - ①？
      - ×

¥*1：医療現場での利用に特化した `Amazon Transcribe Medical <https://aws.amazon.com/jp/transcribe/medical/>`_ と
`Amazon Comprehend Medical <https://aws.amazon.com/jp/comprehend/medical/>`_ は、東京リージョン、日本語ともに非対応。
¥*2：Amazon Transcribe の文字起こしストリーミング (リアルタイムでの文字起こし) は日本語非対応。


まとめ
----------------
今回の記事では、AI サービスの種類とそれぞれのサービスの概要についてご説明させていただきました。

次回からは、AI サービスの個々のサービスについて概要と使い方について見ていきたいと思います。

+++++++++++

.. include:: ../author/author.rst

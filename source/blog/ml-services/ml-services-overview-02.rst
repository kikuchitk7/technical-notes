[第5回] Amazon SageMaker の基本的な使い方を理解する (1)
========================================================

はじめに
--------------------
| `前回 <https://news.mynavi.jp/itsearch/article/devsoft/4983>`_ は、ML サービスおよび Amazon SageMaker の概要と利用方法についてご説明させていただきました。
| 図を用いて「開発」「学習」「推論」の流れを説明しましたが、今回の記事では、実際に Amazon SageMaker を使ってみたいと思います。
| 今回は、下記を理解していただくことを目標に解説をしていきます。

- Amazon SageMaker を使って実際に「開発」を始めるまでの準備作業の流れがわかる。
- Amazon SageMaker を使って、「開発」「学習」「推論」の流れがわかる。


実際に Amazon SageMaker を使う
---------------------------------------
- `「機械学習モデルの構築およびトレーニング、デプロイ with Amazon SageMaker」 <https://aws.amazon.com/jp/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/>`_ という簡単なチュートリアルをベースに進める。
- 背後でどのような処理が行われているか図を交えながら解説していく。


今回の記事で実施すること
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) 表で整理した方が良いかもしれない。
- (メモ) 前回に示した図解の流れと同一だが、前回より細かく提示している点を言及しておく。


.. list-table::
    :header-rows: 1

    * - 工程
      - 実施内容
      - 連載回
    * - 開発
      - AWS マネジメントコンソールにログインする
      - 第5回
    * - 
      - ノートブックインスタンスを作成する
      - 第5回
    * - 
      - 学習・推論に利用するデータを格納するための S3 バケットを作成する
      - 第5回
    * - 
      - 学習・推論に利用するデータを準備する
      - 第5回
    * - 
      - 学習用のコードを開発する
      - 第5回
    * - 学習
      - 
      - 第6回
    * - 推論
      - 
      - 第7回


前提
^^^^^^^^^^^^^^^^^^
今回の記事の内容を実施する上で下記を前提とします。

- 本番環境 (商用サービスが稼働する AWS アカウント) ではなく、開発環境や検証環境で実施する。
- 「AWS アカウントの取得」と「IAM ユーザの作成」を未実施の場合は、下記の Amazon SageMaker の開発者ガイドを参照して実施する。
  IAM ユーザに管理者権限 (AdministratorAccess) を付与する手順となっているが、実際の業務では必要最小限の権限に制限してほしい。

  - `「AWS アカウントを作成する」 <https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/gs-account.html>`_
  - `「IAM 管理者ユーザーおよびグループの作成」 <https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/gs-account-user.html>`_

- この記事の内容を実施すると数百円程度の課金が発生する可能性がある。課金が気になる場合は必ず削除。
- 画面や手順は2020年7月4日時点のもの。仕様変更などにより表示内容や設定値に変更が入る可能性がある。


(開発) AWS マネジメントコンソールにログインする
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) 前回提示した図をベースに何をやっているかを示す。

  - (メモ) ここではマネジメントコンソールのところまでの図をいれる。
  - (メモ) ノートブックインスタンスに IAM ロールの絵を入れた方が良いかも。

.. image:: ../../../images/amazon_sagemaker_notebook_instance_1.png
  :width: 900px

- (メモ) Amazon SageMaker と S3 のコンソール画面への行き方くらいは示す。
- (画像) マネジメントコンソールログイン後の画面

  - (備忘) 「東京」リージョンの確認

- (画像) 「Sage」くらいを入力した検索画面
- (画像) SageMaker のコンソール画面のヘッダ部分
- (画像) SageMaker のコンソール画面構成


(開発) ノートブックインスタンスを作成する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) 前回提示した図をベースに何をやっているかを示す。

  - (メモ) ここではマネジメントコンソールのところまでの図をいれる。

.. image:: ../../../images/amazon_sagemaker_notebook_instance_1.png
  :width: 900px

- (メモ) Jupyter Notebook と JupyterLab の違い、利用できる言語なども言及する。
- 今回は全てデフォルト値を設定する。
- (画像) 「ノートブックインス > ノートブックインスタンス」の画面
- (画像) 「ノートブックインスタンスの作成」のヘッダ部分
  - (備忘) この画面はヘッダ部分のみ提示。設定値は下記の表で提示。


.. list-table::
    :header-rows: 1

    * - 大分類
      - 小分類
      - 設定値名
      - 説明
      - デフォルト値
    * - ノートブックインスタンス設定
      - 
      - ノートブックインスタンス名
      - | ノートブックインスタンスの名前を設定する。
        | 最大 63 文字まで設定可能。英数字もしくはハイフン (-) の利用が可能。
        | 1つのAWS リージョンのアカウント内で一意である必要がある。
      - | (空白)
        | 今回は「mynotebook」と設定
    * - 
      - 
      - ノートブックインスタンスのタイプ
      - | ノートブックインスタンスのタイプを設定する。
        | まずは「ml.t2.medium」など小さいインスタンスで試した方が良い。
        | CPU やメモリなどのリソース不足が発生した場合にスケールアップもしくは不足するリソースに応じたインスタンスタイプを選択する。
        | (例) CPUを重点的に増やしたい：コンピューティング最適化 (ml.c5.large など)、 メモリを重点的に増やしたい：メモリの最適化 (ml.r5.large など)
        | `「Amazon SageMaker ML インスタンスタイプ」 <https://aws.amazon.com/jp/sagemaker/pricing/instance-types/>`_
        | `「Amazon SageMaker の料金」 <https://aws.amazon.com/jp/sagemaker/pricing/>`_
      - ml.t2.medium
    * - 
      - 
      - Elastic Inference
      - | GPU リソースをアタッチする。ディープラーニングフレームワーク TensorFlow、 Apache MXNet、PyTorch でサポートされている。 
        | `「Amazon SageMaker Elastic Inference (EI) を使用する」 <https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/ei.html>`_
      - なし
    * - 
      - 追加設定
      - ライフサイクル設定
      - ノートブックインスタンスの作成時にスクリプトを実行して、ノートブックインスタンスをカスタマイズする。
      - 設定値なし
    * - 
      - 
      - ボリュームサイズ (GB 単位)
      - | ノートブックインスタンスにアタッチする EBS ボリューム (ディスク) のサイズ。
        | ボリュームサイズは 5 GB - 16 TB の範囲で設定可能。 
      - 5
    * - アクセス許可と暗号化
      - 
      - IAM ロール
      - | ノートブックインスタンスに付与する AWS リソースの操作権限を IAM ロールとして設定する。
        | AmazonSageMakerFullAccess を付与する場合、`「AmazonSageMakerFullAccess ポリシー」 <https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/sagemaker-roles.html#sagemaker-roles-amazonsagemakerfullaccess-policy>`_ に記載されている操作権限が付与される。
      - 新しい IAM ロールの作成
    * - 
      - 
      - ルートアクセス - オプション
      - 
      - 有効化 - ノートブックへのルートアクセス権をユーザーに付与する
    * - 
      - 
      - 暗号化キー - オプション
      - ノートブックインスタンスにアタッチする EBS ボリューム (ディスク) の Amazon KMS の暗号鍵を設定する。
      - カスタム暗号化なし
    * - ネットワーク - オプション
      - 
      - VPC - オプション
      - 
      - 非 VPC
    * - Git リポジトリ - オプション
      - デフォルトのリポジトリ
      - リポジトリ
      - | ノートブックインスタンスの作成時に自動で Git リポジトリをクローンする。
        | 例えば、学習・推論用コードが格納された Git リポジトリやアプリのコードが格納されたリポジトリを自動でクローンし、その分の手間が省ける。
        | デフォルトのリポジトリを1つ、追加のリポジトリを最大3つ設定可能。
      - なし
    * - タグ - オプション
      - 
      - キー、値
      - | キーバリュー形式で値を設定する。
        | (例) Name タグ (Name: *<notebook_instance_name>*)、環境タグ (Environment: Production)
      - (空白)


IAM ロールに関して詳しく説明する。
IAM ロールは AWS のリソースに操作権限を与えるもの。
認証情報のハードコーディングはアンチパターン。IAM ロールの形式で権限を付与する。
ノートブックインスタンスに AWS リソースの操作権限を与える必要がある。
ノートブックインスタンスにアタッチする IAM ロールを作成し、「AmazonSageMakerFullAccess ポリシー」をポリシーとして付与した場合はリンクに示した操作権限が与えられる。
特に、Amazon S3 について、下記の条件に当てはまるバケットとオブジェクトの操作権限が与えられる。


.. list-table::
  :header-rows: 1

  * - 条件
    - 説明
  * - 名前に「sagemaker」が含まれる任意の S3 バケット
    - | 下記のように S3 バケット名に「sagemaker」を含む。
      | (例) **○** my-sagemaker-s3-bucket、**×** my-s3-bucket
  * - 名前に「sagemaker」が含まれる任意の S3 オブジェクト
    - | 下記のように S3 バケットに格納されているオブジェクト (ファイル) 名に 「sagemaker」を含む。
      | (例) **○** my-sagemaker-object.csv、**×** my-object.csv
  * - タグ「sagemaker」と値「true」が含まれる任意の S3 オブジェクト
    - | 下記のようにキーが「sagemaker」、値が「true」と設定されたオブジェクト
      | (例) sagemaker: true
  * - SageMaker へのアクセスを許可するバケットポリシーを持つ S3 バケット
    - 
  * - 指定する S3 バケット - オプション
    - | **任意の S3 バケット**
      | (例) my-s3-bucket
      | **特定の S3 バケット**
      | (例) my-s3-bucket-1, my-s3-bucket-2


(開発) 学習・推論に利用するデータを格納するための S3 バケットを作成する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) Jupyter から作成するパターンと AWS マネジメントコンソールから作成するパターンの2つを示した方が良いかも。


(開発) 学習・推論に利用するデータを準備する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


(開発) 学習用のコードを開発する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) ECR の言及
- 長くなりそうなので、(開発) で一度話を切った方が良いかも。

(学習) XGBoost (ビルトインアルゴリズム) を利用して学習を行う
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) ビルトインアルゴリズムを利用することでコーディング量が減る。


(推論) 学習済モデルを推論用インスタンスにデプロイする
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


(推論) 精度の評価を行う
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) デプロイ前におきたいな。
- (メモ) ROC 曲線、AUC を利用しても良いかも。
- (メモ) アプリからの接続方法についても言及する。


(後片付け) 作成したリソースを削除する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- (メモ) 任意で実施。課金が気になる場合は必ず実施する。
- (メモ) 課金されるリソース・課金されないリソースを書いておく。


考察
----------------
- (メモ) ここまででかなりの長さになることが予想されるので、連載を分けた方が良いかも。
- (メモ) 自分のビジネス課題に応用するにはどうすれば良いのか？
- (メモ) XGBoost の詳細を知る必要があるか？ (下記あたりを抑えておけば良いのでは？)

  - どんな課題に適用できるか？
  - どんなデータを準備すれば良いか？
  - どうやって利用するか？


まとめ
--------------------
| 今回の記事では、Amazon SageMaker を実際に使って開発・学習・推論をする方法についてご説明させていただきました。
| 次回は、Amazon SageMaker Studio の使い方についてみていきたいと思います。


参考文献
-----------------
- `「機械学習モデルの構築およびトレーニング、デプロイ with Amazon SageMaker」 <https://aws.amazon.com/jp/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/>`_
- `「Amazon SageMaker 開発者ガイド」 <https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/whatis.html>`_
- `「Amazon SageMaker ML インスタンスタイプ」 <https://aws.amazon.com/jp/sagemaker/pricing/instance-types/>`_
- `「Amazon SageMaker の料金」 <https://aws.amazon.com/jp/sagemaker/pricing/>`_


+++++++++++

.. include:: ../author/author.rst

ソフトウェアテスト
========================

ホワイトボックステスト
------------------------

概要
^^^^^^^^^^
- プログラムの論理構造が正しいかを確認するためのテスト。
- 1990年代頃からはブラックボックステストの方がよく実施されていたが、Agile 開発において、 TDD が流行り始めたことで復権した。

手法
^^^^^^^^^

制御パステスト
+++++++++++++++++++
- プログラムがどのような振る舞いをして、どのように制御されていくかをテストする。
- カバレッジ率を取得するために必要。

ステートメントカバレッジ (C0)
*****************************
- コード内の命令文 (ステートメント) を少なくとも1回は実行する。
- 例えば、if 文の条件が TRUE となるテストが実施されれば良く、FALSE がテストされる必要はない。
- 弱いテストであり、一般的にステートメントカバレッジだけでテストを終了することは危険と考えられている。

ブランチカバレッジ (C1)
***************************
- 分岐コードに対してそれぞれの判定条件が TRUE / FALSE の結果を少なくとも1回ずつ持つようにテストする。
- ステートメントカバレッジと比較して強いテストであり、一般的に最低限ブランチカバレッジは実行すべきと考えられている。
- テストケースが増える。

カバレッジ基準
^^^^^^^^^^^^^^^^^^
- 100%を目指すのが理想であるが、時間と費用の観点で実現が難しい。
- 一般の商用ソフトウェアでは60%~90%程度を目指す。
- 人命に関わるような重要なシステムでは高いカバレッジの実現を目指す。
- 下記はカバレッジテストでカバーされない可能性がある。

    - エラー処理

        - メモリリークなど再現性が困難なテストなど

    - 使われていないコード

        - 実際には使われていない可能性が高いが、消去するにはリスクが高く残存させているコードなど

カバレッジテストで検出できないバグ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 例えば下記はカバレッジテストでバグを検出できないため、別の手段で確認する必要がある。

    - プログラムのループに関するバグ

        - ループはカバレッジ基準が定義されていない。
        - 無限ループに陥る可能性もあるので、アプローチを決めておく。

    - 要求仕様自体が間違っていたり、機能が備わっていないバグ

        - テストは要求仕様通りに動くかを確認するものであるため。

    - データに関するバグ

        - 例えば、マルチスレッドに関する処理が適切に行われているか？など。

    - タイミングに関するバグ

        - マルチタスや割り込みなど

注意事項
^^^^^^^^^^^^^
- カバレッジテストに振り回されず、自分たちで決めた目標を達成することを考える。

<a id="markdown-tdd" name="tdd"></a>
## TDD
- Kent Beck が提唱した XP のプラクティス。
- 最初にテストコードを作成し、それを満たすようにコーディングを行う実装方法。
- JUnit などのフレームワーク (ツール) を使って実行する。
- 下記の手順で実行する。

    #. 小さい動作しないテストを書く。 (コンパイルは通らなくて良い)

        - テストに対するコードがないので、フレームワークの実行結果がエラーになる。 (赤)

    #. テストを通すコードを書く。

        - テストが正常終了する。 (緑)

    #. 重複したコードを削除する。

        - リファクタリング (コードのクリーン)。

参考
^^^^^^^^^
- 高橋寿一, 『知識ゼロから学ぶ ソフトウェアテスト 【改訂版】』, 翔泳社, 2013.
